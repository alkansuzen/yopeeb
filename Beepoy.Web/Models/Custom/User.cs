//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beepoy.Web.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    public partial class User
    {

        public List<Beep> FollowingBeeps(Func<Beep, bool> filter, int take = 10)
        {
            return FollowingBeeps(this.UserId, filter, take);
        }
        public List<Beep> FollowingBeeps(long UserId, Func<Beep, bool> filter, int take = 10)
        {
            var context = new MvcBeepoyEntities();

            var pegaBeeps = (from users in context.Users
                             join tracks in context.TrackUserEvents
                                  on users.UserId equals tracks.UserId

                             join beepsEvents in context.BeepsEvents
                                  on tracks.EventId equals beepsEvents.BeepId
                             join beeps in context.Beeps
                                  on beepsEvents.BeepId equals beeps.BeepId

                             where UserId == users.UserId
                             select beeps)
                             .Union(
                             from users in context.Users
                             join places in context.TrackUserPlaces
                                  on users.UserId equals places.UserId

                             //join beeps in context.Beeps
                             //     on places.PlaceId equals beeps.PlaceId

                             join beepsPlaces in context.BeepsPlaces
                                  on places.PlaceId equals beepsPlaces.BeepId
                             join beeps in context.Beeps
                                  on beepsPlaces.BeepId equals beeps.BeepId

                             where UserId == users.UserId
                             select beeps)
                             .Union(
                             from users in context.Users
                             join trackUser in context.TrackUserUsers
                                  on users.UserId equals trackUser.UserIdTracked
                             join beeps in context.Beeps
                                  on trackUser.UserIdTracked equals beeps.UserId
                             where UserId == users.UserId
                             select beeps)
                             .Union(
                             from users in context.Users
                             join places in context.TrackUserPlaces
                                  on users.UserId equals places.UserId
                             join events in context.Events
                                  on places.PlaceId equals events.PlaceId

                             //join beeps in context.Beeps
                             //     on events.EventId equals beeps.EventId

                             join beepsEvents in context.BeepsEvents
                                  on events.EventId equals beepsEvents.BeepId
                             join beeps in context.Beeps
                                  on beepsEvents.BeepId equals beeps.BeepId

                             where UserId == users.UserId
                             select beeps)
                             .Distinct()
                             .OrderByDescending(b => b.DateInsert)
                             .Take(take)
                             .Where(filter);


            //Deprecated
            /*  IQueryable pegaBeeps = context.Users.Where(u => u.UserId == userId).
                                       Join(context.TrackUserEvents,
                                             outer => outer.UserId,
                                             inner => inner.UserId,
                                             (user, track) => new { EventId = track.EventId })
                                      .Join(context.Beeps,
                                            outer => outer.EventId,
                                            inner => inner.EventId,
                                            (evento, beep) => beep)
                                  .Union(
                                      context.Users.Where(u => u.UserId == userId).
                                      Join(context.TrackUserPlaces,
                                             outer => outer.UserId,
                                             inner => inner.UserId,
                                             (user, track) => new { PlaceId = track.PlaceId })
                                      .Join(context.Beeps,
                                            outer => outer.PlaceId,
                                            inner => inner.PlaceId,
                                            (evento, beep) =>  beep )
                                  )
                                  .Union(
                                      context.Users.Where(u => u.UserId == userId).
                                      Join(context.TrackUserUsers,
                                             outer => outer.UserId,
                                             inner => inner.UserId,
                                             (user, track) => new { UserTrackedId = track.UserIdTracked })
                                      .Join(context.Beeps,
                                            outer => outer.UserTrackedId,
                                            inner => inner.UserId,
                                            (evento, beep) =>  beep )
                                  ).Distinct().OrderByDescending(b => b.DateInsert);*/

            return pegaBeeps.Cast<Beep>().ToList();
        }

   
  
    }
}
